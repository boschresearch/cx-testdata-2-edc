# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from .base_model import MyBaseModel
from pydantic import AnyUrl, BaseModel, EmailStr, validator, Field  # noqa: F401


class ProtocolInformation(MyBaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    ProtocolInformation - a model defined in OpenAPI

        endpoint_address: The endpoint_address of this ProtocolInformation.
        endpoint_protocol: The endpoint_protocol of this ProtocolInformation [Optional].
        endpoint_protocol_version: The endpoint_protocol_version of this ProtocolInformation [Optional].
        subprotocol: The subprotocol of this ProtocolInformation [Optional].
        subprotocol_body: The subprotocol_body of this ProtocolInformation [Optional].
        subprotocol_body_encoding: The subprotocol_body_encoding of this ProtocolInformation [Optional].
    """

    endpoint_address: str = Field(None, alias='endpointAddress')
    endpoint_protocol: Optional[str] = Field(None, alias='endpointProtocol')
    endpoint_protocol_version: Optional[str] = Field(None, alias='endpointProtocolVersion')
    subprotocol: Optional[str] = None
    subprotocol_body: Optional[str] = Field(None, alias='subprotocolBody')
    subprotocol_body_encoding: Optional[str] = Field(None, alias='subprotocolBodyEncoding')

    @validator("endpoint_address")
    def endpoint_address_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("endpoint_address")
    def endpoint_address_max_length(cls, value):
        assert len(value) <= 512
        return value

    @validator("endpoint_protocol")
    def endpoint_protocol_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("endpoint_protocol")
    def endpoint_protocol_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("endpoint_protocol_version")
    def endpoint_protocol_version_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("endpoint_protocol_version")
    def endpoint_protocol_version_max_length(cls, value):
        assert len(value) <= 24
        return value

    @validator("subprotocol")
    def subprotocol_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("subprotocol")
    def subprotocol_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("subprotocol_body")
    def subprotocol_body_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("subprotocol_body")
    def subprotocol_body_max_length(cls, value):
        assert len(value) <= 50
        return value

    @validator("subprotocol_body_encoding")
    def subprotocol_body_encoding_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("subprotocol_body_encoding")
    def subprotocol_body_encoding_max_length(cls, value):
        assert len(value) <= 50
        return value

ProtocolInformation.update_forward_refs()
