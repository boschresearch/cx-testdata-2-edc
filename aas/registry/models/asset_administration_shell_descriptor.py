# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from .base_model import MyBaseModel
from pydantic import AnyUrl, EmailStr, validator, Field  # noqa: F401
from aas.registry.models.administrative_information import AdministrativeInformation
from aas.registry.models.descriptor import Descriptor
from aas.registry.models.endpoint import Endpoint
from aas.registry.models.identifier_key_value_pair import IdentifierKeyValuePair
from aas.registry.models.lang_string import LangString
from aas.registry.models.reference import Reference
from aas.registry.models.submodel_descriptor import SubmodelDescriptor


class AssetAdministrationShellDescriptor(MyBaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    AssetAdministrationShellDescriptor - a model defined in OpenAPI

        administration: The administration of this AssetAdministrationShellDescriptor [Optional].
        description: The description of this AssetAdministrationShellDescriptor [Optional].
        global_asset_id: The global_asset_id of this AssetAdministrationShellDescriptor [Optional].
        id_short: The id_short of this AssetAdministrationShellDescriptor.
        identification: The identification of this AssetAdministrationShellDescriptor.
        specific_asset_ids: The specific_asset_ids of this AssetAdministrationShellDescriptor [Optional].
        submodel_descriptors: The submodel_descriptors of this AssetAdministrationShellDescriptor [Optional].
        endpoints: The endpoints of this AssetAdministrationShellDescriptor [Optional].
    """

    administration: Optional[AdministrativeInformation] = None
    description: Optional[List[LangString]] = None
    global_asset_id: Optional[Reference] = Field(None, alias='globalAssetId')
    id_short: str = Field(None, alias='idShort')
    identification: str
    specific_asset_ids: Optional[List[IdentifierKeyValuePair]] = Field(None, alias='specificAssetIds')
    submodel_descriptors: Optional[List[SubmodelDescriptor]] = Field(None, alias='submodelDescriptors')
    endpoints: Optional[List[Endpoint]] = None

    @validator("id_short")
    def id_short_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("id_short")
    def id_short_max_length(cls, value):
        assert len(value) <= 100
        return value

    @validator("identification")
    def identification_min_length(cls, value):
        assert len(value) >= 1
        return value

    @validator("identification")
    def identification_max_length(cls, value):
        assert len(value) <= 200
        return value

AssetAdministrationShellDescriptor.update_forward_refs()
